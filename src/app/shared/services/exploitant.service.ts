import { Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { map } from 'rxjs/operators';
import { BusinessModel } from "../models/business-model";
import { PaginatedList } from "../models/paginated-list";
import { ExploitantCriteria } from "../models/exploitant.criteria";
import { Exploitant } from "../models/exploitant.model";
import { AuthHttpService } from "./auth-http.service";
import { SettingsService } from "./settings.service";


@Injectable()
export class ExploitantService {

    constructor(private settings: SettingsService,
                private authHttp: AuthHttpService) {
    }

    saveExploitant(exploitant: Exploitant): Observable<Response> {
        return this.authHttp.post(this.settings.server.url + `/exploitant`, exploitant);
    }

    updateExploitant(exploitant: Exploitant): Observable<Response> {
        return this.authHttp.put(this.settings.server.url + `/exploitant/${exploitant.id}`, exploitant);
    }

    getExploitant( id: number, includes?: Array<string>, excludes?: Array<string> ): Observable<Exploitant> {
        const p_includes: string = includes ? '?includes=' + includes : '';
        const p_excludes: string = excludes ? '&excludes=' + excludes : '';
        const params = p_includes + p_excludes;
        return this.authHttp.get( this.settings.server.url + `/exploitant/${id}` + params )
            .pipe(map(( res: Response ) => JSON.parse(JSON.stringify(res)) ));
    }

    deleteExploitant(exploitantListForDelete: Array<Exploitant>) {
        return this.authHttp.delete(this.settings.server.url + `/exploitant/delete`, {body : exploitantListForDelete})
    }

    findExploitantsByCriteria(exploitantCriteria: ExploitantCriteria): Observable<Array<Exploitant>> {
        return this.authHttp.post(this.settings.server.url + `/exploitant/listByCriteria`, exploitantCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    listExploitants(exploitantCriteria: ExploitantCriteria): Observable<PaginatedList> {
        return this.authHttp.post(this.settings.server.url + `/exploitant/paginatedListByCriteria`, exploitantCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    getExploitantsDataSize(exploitantCriteria: ExploitantCriteria): Observable<number> {
        return this.authHttp.post(this.settings.server.url + `/exploitant/getExploitantsDataSize`, exploitantCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    exportExploitants( exploitantCriteria: ExploitantCriteria ): Observable<any> {
        return this.authHttp.post( this.settings.server.url + `/exploitant/exportExploitants/`, exploitantCriteria, { responseType: 'blob' })
            .pipe(map( res => res ));
    }

    findExploitantByCriteria(exploitantCriteria: ExploitantCriteria): Observable<Array<Exploitant>> {
        return this.authHttp.post(this.settings.server.url + `/exploitant/listByCriteria`, exploitantCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

}
