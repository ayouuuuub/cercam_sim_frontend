import { Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { map } from 'rxjs/operators';
import { ExploitationCriteria } from "../models/exploitation.criteria";
import { Exploitation } from "../models/exploitation.model";
import { PaginatedList } from "../models/paginated-list";
import { AuthHttpService } from "./auth-http.service";
import { SettingsService } from "./settings.service";


@Injectable({
    providedIn: 'root'
})
export class ExploitationService {

    constructor(private settings: SettingsService,
                private authHttp: AuthHttpService) {
    }

    saveExploitation(exploitation: Exploitation): Observable<Response> {
        return this.authHttp.post(this.settings.server.url + `/exploitation`, exploitation);
    }

    updateExploitation(exploitation: Exploitation): Observable<Response> {
        return this.authHttp.put(this.settings.server.url + `/exploitation/${exploitation.id}`, exploitation);
    }

    getExploitation( id: number, includes?: Array<string>, excludes?: Array<string> ): Observable<Exploitation> {
        const p_includes: string = includes ? '?includes=' + includes : '';
        const p_excludes: string = excludes ? '&excludes=' + excludes : '';
        const params = p_includes + p_excludes;
        return this.authHttp.get( this.settings.server.url + `/exploitation/${id}` + params )
            .pipe(map(( res: Response ) => JSON.parse(JSON.stringify(res)) ));
    }

    deleteExploitation(exploitationListForDelete: Array<Exploitation>) {

        return this.authHttp.delete(this.settings.server.url + `/exploitation/delete`, {body : exploitationListForDelete})
    }

    findMinimalExploitationsByCriteria(exploitationCriteria: ExploitationCriteria): Observable<Array<Exploitation>> {
        return this.authHttp.post(this.settings.server.url + `/exploitation/minlistByCriteria`, exploitationCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    findExploitationsByCriteria(exploitationCriteria: ExploitationCriteria): Observable<Array<Exploitation>> {
      return this.authHttp.post(this.settings.server.url + `/exploitation/listByCriteria`, exploitationCriteria)
          .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    getMinMaxSurfTot(exploitationCriteria: ExploitationCriteria): Observable<Array<any>> {
      return this.authHttp.post(this.settings.server.url + `/exploitation/getMinMaxSurfTot`, exploitationCriteria)
        .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    getMinMaxSurfIrr(exploitationCriteria: ExploitationCriteria): Observable<Array<Exploitation>> {
      return this.authHttp.post(this.settings.server.url + `/exploitation/getMinMaxSurfIrr`, exploitationCriteria)
        .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    listExploitations(exploitationCriteria: ExploitationCriteria): Observable<PaginatedList> {
        return this.authHttp.post(this.settings.server.url + `/exploitation/paginatedListByCriteria`, exploitationCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    getExploitationsDataSize(exploitationCriteria: ExploitationCriteria): Observable<number> {
        return this.authHttp.post(this.settings.server.url + `/exploitation/getExploitationsDataSize`, exploitationCriteria)
            .pipe(map((res: Response) => JSON.parse(JSON.stringify(res))));
    }

    exportExploitations( exploitationCriteria: ExploitationCriteria ): Observable<any> {

        return this.authHttp.post( this.settings.server.url + `/exploitation/exportExploitations/`, exploitationCriteria , { responseType: 'blob' })
            .pipe(map( res => res ));
    }



}
