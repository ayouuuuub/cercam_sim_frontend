import { CanalVenteCriteria } from './../../shared/models/canal_vente.criteria';
import { QualiteProduitService } from './../../shared/services/qualite_produit.service';
import { StabilitePrixService } from './../../shared/services/stabilite_prix.service';
import { ValorisationService } from './../../shared/services/valorisation.service';
import { CanalVenteService } from './../../shared/services/canal_vente.service';
import { MarcheService } from './../../shared/services/marche.service';
import { TechniciteService } from './../../shared/services/technicite.service';
import { MechanismeService } from './../../shared/services/mechanisme.service';
import { QualiteProduit } from './../../shared/models/qualite_produit.model';
import { StabilitePrix } from './../../shared/models/stabilite_prix.model';
import { Valorisation } from './../../shared/models/valorisation.model';
import { CanalVente } from './../../shared/models/canal_vente.model';
import { Technicite } from './../../shared/models/technicite.model';
import { Mechanisme } from './../../shared/models/mechanisme.model';
import { ExploitationCriteria } from './../../shared/models/exploitation.criteria';
import { map } from 'rxjs/operators';
import { DensiteCriteria } from './../../shared/models/densite.criteria';
import { DensiteService } from './../../shared/services/densite.service';
import { VarieteService } from './../../shared/services/variete.service';
import { ActiviteService } from './../../shared/services/activite.service';
import { ActiviteCriteria } from './../../shared/models/activite.criteria';
import { EnumService } from './../../shared/services/enum.service';
import { ProvinceService } from './../../shared/services/province.service';
import { FormBuilder } from '@angular/forms';
import { RegionCriteria } from './../../shared/models/region.criteria';
import { Component, OnInit } from '@angular/core';
import { BaseComponent } from 'src/app/shared/component/base-component';
import { Region } from 'src/app/shared/models/region.model';
import { FormGroup } from '@angular/forms';
import { ProvinceCriteria } from 'src/app/shared/models/province.criteria';
import { Province } from 'src/app/shared/models/province.model';

import {OSM, TileArcGISRest} from 'ol/source';
import TileLayer from 'ol/layer/Tile';
import Overlay from 'ol/Overlay';
import {getCenter} from 'ol/extent';

import { Cercle } from 'src/app/shared/models/cercle.model';
import { Commune } from 'src/app/shared/models/commune.model';
import { CercleCriteria } from 'src/app/shared/models/cercle.criteria';
import { CommuneCriteria } from 'src/app/shared/models/commune.criteria';
import { ProduitCriteria } from 'src/app/shared/models/produit.criteria';
import { ProduitService } from 'src/app/shared/services/produit.service';
import { Produit } from 'src/app/shared/models/produit.model';
import { Activite } from 'src/app/shared/models/activite.model';
import { Densite } from 'src/app/shared/models/densite.model';
import { Variete } from 'src/app/shared/models/variete.model';
import { VarieteCriteria } from 'src/app/shared/models/variete.criteria';
import { ExploitationService } from 'src/app/shared/services/exploitation.service';
import { Marche } from 'src/app/shared/models/marche.model';
import { Filter } from 'src/app/shared/models/filter.model';

declare let $: any;
declare var Slider: any;
declare var myExtObject: any;
@Component({
  selector: 'app-layout-exploitation',
  templateUrl: './layout-exploitation.component.html',
  styleUrls: ['./layout-exploitation.component.scss']
})
export class LayoutExploitationComponent extends BaseComponent implements OnInit {

  regions: Region[] = [];
  provinces: Province[] = [];
  cercles: Cercle[] = [];
  communes: Commune[] = [];

  produits: Produit[];
  densites: Densite[];
  varietes: Variete[];
  activites: Activite[];
  mechanismes: Mechanisme[];
  technicites: Technicite[];
  marches: Marche[];
  canalsVente: CanalVente[];
  valorisation: Valorisation[];
  stabilitesPrix: StabilitePrix[];
  qualitesProduit: QualiteProduit[];

  typesActivite: Object[];
  natureSol: Object[];
  typeIrrgs: Object[];
  appliedFilter: Filter;
  minSurf: number;
  maxSurf: number;
  exploitationForm: FormGroup;
  listOverlays: any[] = [];
  filterMode: string = 'Exploitation';

  public slider:any;
  constructor(public fb: FormBuilder,
              public enumService: EnumService,
              public exploitationService: ExploitationService,
              public produitService: ProduitService,
              public varieteService: VarieteService,
              public densiteService: DensiteService,
              public mechanismeService: MechanismeService,
              public techniciteService: TechniciteService,
              public marcheService: MarcheService,
              public canalVenteService: CanalVenteService,
              public valorisationService: ValorisationService,
              public stabilitePrixService: StabilitePrixService,
              public qualiteProduitService: QualiteProduitService,
              public activiteService: ActiviteService) {
    super();

  }
  closeFilterMenu() {
    $('#filterMenu').hide();
  }
  resetFilterMenu() {
    this.exploitationForm.controls['nature_sol'].setValue(null);
    this.exploitationForm.controls['marche'].setValue(null);
    this.exploitationForm.controls['valorisation'].setValue(null);
    this.exploitationForm.controls['qualite_produit'].setValue(null);
    this.exploitationForm.controls['type_irrigation'].setValue(null);
    this.exploitationForm.controls['mechanisation'].setValue(null);
    this.exploitationForm.controls['stabilite_prix'].setValue(null);
    this.exploitationForm.controls['technicite'].setValue(null);
  }
  getTypeActivities() {
    this.enumService.getTypeActivite().subscribe((typesActivite) => {
      this.typesActivite = Object.keys(typesActivite).map(key => typesActivite[key]);
    })
  }

  getTypeIrr() {
    this.enumService.getTypeIrrigation().subscribe((typeIrrgs) => {
      this.typeIrrgs = Object.keys(typeIrrgs).map(key => typeIrrgs[key]);
    })
  }

  removeOverlays() {
    for(let overlayDiv of this.listOverlays)
        this.map.removeOverlay(overlayDiv);
  }
  addOverlays(echelle) {
    let self = this;
    this.removeOverlays();
    self.initLayer.getSource().on('change', function(evt) {
      var source = evt.target;
      if(source.getState() === 'ready') {
          self.initLayer.getSource().getFeatures().forEach(feature => {
              self.activites.filter(function (activite) {
                if(activite[echelle].id == feature.values_.id)
                  feature.values_['valeur'] = activite.total;
              })
          })
      }
    })
    let vectorSource = this.initLayer.getSource();
    vectorSource.on('change', (e) => {
      if (vectorSource.getState() == 'ready') {
        var features = vectorSource.getFeatures();
        for(var i = 0; i < features.length ; i++) {
          var extent = features[i].getGeometry().getExtent();
          var center = getCenter(extent);
          let centerupdate = [];
          centerupdate[0] = center[0] /* +(center[0]/5) */ ;
          centerupdate[1] = center[1] /* +(center[1]/12.456801097018786) */ ;
          // console.log(centerupdate);
          var divid = features[i].values_['id'];
          var overlayDivDom = document.createElement('div');
          overlayDivDom.id = 'overlay'+ divid
          overlayDivDom.className = 'overlay';

          const valeur = features[i].values_.valeur != undefined ? features[i].values_.valeur : 0;
          var innerDiv = $('<div id="overlayDiv' + divid + '" style="background: var(--juniper); color: #fff; font-size: .6em; border-radius: 5px; text-align: center; padding: 0.25rem .5rem; width: fit-content;" ><span>'+ valeur.toFixed(2)+'</span></div>');

          overlayDivDom.append(innerDiv[0]);
          $('#overlay').appendoverlayDivDom;
          var overlayDiv = new Overlay({
              positioning: 'bottom-center',
              position: centerupdate,
              element: overlayDivDom,
              offset: [0, 15]
              // offset: indecator.tabOffsetInHistogramme,
          });

          self.map.addOverlay(overlayDiv);
          self.listOverlays.push(overlayDiv);
        }
      }
    })
  }

  initForm() {
    this.exploitationForm = this.fb.group({
      region: [null],
      province: [null],
      commune: [null],
      cercle: [null],
      typeActivite: [null],
      produit: [null],
      variete: [null],
      densite: [null],
      surf_range: [null],
      nature_sol: [null],
      type_irrigation: [null],
      mechanisation: [null],
      technicite: [null],
      canal_vente: [null],
      valorisation: [null],
      stabilite_prix: [null],
      qualite_produit: [null],
      marche: [null]
    })
  }
  loadMechanisationList() {
    this.getMechanisation().then((mechanismes: Mechanisme[])=> {
      this.mechanismes = mechanismes;
    })
  }
  loadTechniciteList() {
    this.getTechnicite().then((technicites: Technicite[])=> {
      this.technicites = technicites;
    })
  }
  loadValorisationList() {
    this.getValorisations().then((valorisation: Valorisation[])=> {
      this.valorisation = valorisation;
    })
  }
  loadStabilitePrixList() {
    this.getStabilitePrix().then((stabilitesPrix: StabilitePrix[])=> {
      this.stabilitesPrix = stabilitesPrix;
    })
  }
  loadQualiteProduitList() {
    this.getQualitesPrix().then((qualitesProduit: QualiteProduit[])=> {
      this.qualitesProduit = qualitesProduit;
    })
  }
  loadMarcheList() {
    this.getMarcheList().then((marches: Marche[])=> {
      this.marches = marches;
    })
  }
  loadCanalVente() {
    let canalVenteCriteria: CanalVenteCriteria = new CanalVenteCriteria();
    canalVenteCriteria.produitId = this.exploitationForm.controls['produit'].value;
    this.getCanalVentes(canalVenteCriteria).then((canalsVente: CanalVente[]) => {
      this.canalsVente = canalsVente;
    })
  }
  async loadActivite() {
    this.appliedFilter = new Filter();
    let activiteCriteria: ActiviteCriteria = new ActiviteCriteria();
    activiteCriteria.familleProduitType = this.exploitationForm.controls['typeActivite'].value;
    activiteCriteria.produitId = ( this.appliedFilter.produit = this.exploitationForm.controls['produit'].value) ? this.exploitationForm.controls['produit'].value.id : null;
    activiteCriteria.varieteId = ( this.appliedFilter.variete = this.exploitationForm.controls['variete'].value) ? this.exploitationForm.controls['variete'].value.id : null;
    activiteCriteria.densiteId = (this.appliedFilter.densite = this.exploitationForm.controls['densite'].value) ? this.exploitationForm.controls['densite'].value.id : null;
    activiteCriteria.nature_sol = this.appliedFilter.nature_sol = this.exploitationForm.controls['nature_sol'].value;
    activiteCriteria.type_irrigation = this.appliedFilter.type_irrigation =  this.exploitationForm.controls['type_irrigation'].value;
    activiteCriteria.mechanismeId = ( this.appliedFilter.mechansime = this.exploitationForm.controls['mechanisation'].value) ? this.exploitationForm.controls['mechanisation'].value.id : null;
    activiteCriteria.techniciteId = ( this.appliedFilter.technicite = this.exploitationForm.controls['technicite'].value) ? this.exploitationForm.controls['technicite'].value.id : null;
    activiteCriteria.marcheId = ( this.appliedFilter.marche = this.exploitationForm.controls['marche'].value) ? this.exploitationForm.controls['marche'].value.id : null;
    activiteCriteria.canalVenteId = ( this.appliedFilter.canalVente = this.exploitationForm.controls['canal_vente'].value) ? this.exploitationForm.controls['canal_vente'].value.id : null;
    activiteCriteria.valorisationId = (this.appliedFilter.valorisation = this.exploitationForm.controls['valorisation'].value) ? this.exploitationForm.controls['valorisation'].value.id : null;
    activiteCriteria.stabilitePrixId = (this.appliedFilter.stabilitePrix = this.exploitationForm.controls['stabilite_prix'].value) ? this.exploitationForm.controls['stabilite_prix'].value.id : null;
    activiteCriteria.qualiteProduitId = (this.appliedFilter.qualiteProduit = this.exploitationForm.controls['qualite_produit'].value) ? this.exploitationForm.controls['qualite_produit'].value.id : null;

    if(this.exploitationForm.controls['commune'].value != null ) {
      activiteCriteria.communeId = this.exploitationForm.controls['commune'].value.id;
      this.appliedFilter.commune = this.exploitationForm.controls['commune'].value;
    } else if(this.exploitationForm.controls['cercle'].value != null ) {
      activiteCriteria.cercleId = this.exploitationForm.controls['cercle'].value.id;
      this.appliedFilter.cercle = this.exploitationForm.controls['cercle'].value;
      this.loadCommuneMap(this.exploitationForm.controls['cercle'].value.id);
      await this.getSumByCommune(activiteCriteria).then((activites : Activite[]) => {
        this.activites = [...activites];
      });
      this.addOverlays('commune');
    } else if(this.exploitationForm.controls['province'].value != null ) {
      activiteCriteria.provinceId = this.exploitationForm.controls['province'].value.id;
      this.appliedFilter.province = this.exploitationForm.controls['province'].value;
      this.loadCercleMap(this.exploitationForm.controls['province'].value.id);
      await this.getSumByCercle(activiteCriteria).then((activites : Activite[]) => {
        this.activites = [...activites];
      });
      this.addOverlays('cercle');
    } else if(this.exploitationForm.controls['region'].value != null ) {
      activiteCriteria.regionId = this.exploitationForm.controls['region'].value.id;
      this.appliedFilter.region = this.exploitationForm.controls['region'].value;
      this.loadProvinceMap(this.exploitationForm.controls['region'].value.id);
      await this.getSumByProvince(activiteCriteria).then((activites : Activite[]) => {
        this.activites = [...activites];
      });
      this.addOverlays('province');
    } else if(this.exploitationForm.controls['region'].value == null ) {
      this.loadRegionMap();
      await this.getSumByRegion(activiteCriteria).then((activites : Activite[]) => {
        this.activites = [...activites];
      });
      this.addOverlays('region');
    }
  }
  getSumByRegion(activiteCriteria: ActiviteCriteria) {
    return new Promise((resolve)=> {
      this.activiteService.sumByRegion(activiteCriteria).subscribe((activites: Activite[]) => {
        resolve(activites);
      });
    })
  }
  getSumByProvince(activiteCriteria: ActiviteCriteria) {
    return new Promise((resolve)=> {
      this.activiteService.sumByProvince(activiteCriteria).subscribe((activites: Activite[]) => {
        resolve(activites);
      });
    })
  }
  getSumByCercle(activiteCriteria: ActiviteCriteria) {
    return new Promise((resolve)=> {
      this.activiteService.sumByCercle(activiteCriteria).subscribe((activites: Activite[]) => {
        resolve(activites);
      });
    })
  }
  getSumByCommune(activiteCriteria: ActiviteCriteria) {
    return new Promise((resolve)=> {
      this.activiteService.sumByCommune(activiteCriteria).subscribe((activites: Activite[]) => {
        resolve(activites);
      });
    })
  }

  loadProduits() {
    let produitCriteria: ProduitCriteria = new ProduitCriteria();
    produitCriteria.type = this.exploitationForm.controls['typeActivite'].value;
    this.produitService.findProduitsByCriteria(produitCriteria).subscribe((produits) => {
      this.produits = produits;
    })
  }

  loadCommunes() {
    this.exploitationForm.controls['commune'].setValue(null);
    this.communes = [];
    let communeCriteria: CommuneCriteria = new CommuneCriteria();
    communeCriteria.cercleId = this.exploitationForm.controls['cercle'].value ? this.exploitationForm.controls['cercle'].value.id : null;
    this.getCommunes(communeCriteria).then((communes: Commune[]) => {
      this.communes = communes;
    })
  }

  loadCercles() {
    this.exploitationForm.controls['cercle'].setValue(null);
    this.cercles = [];
    let cercleCriteria: CercleCriteria = new CercleCriteria();
    cercleCriteria.provinceId = this.exploitationForm.controls['province'].value ? this.exploitationForm.controls['province'].value.id : null;
    this.getCercles(cercleCriteria).then((cercles: Cercle[]) => {
      this.cercles = cercles;
    })
  }

  loadProvinces() {
    this.exploitationForm.controls['province'].setValue(null);
    this.provinces = [];
    let provinceCriteria: ProvinceCriteria = new ProvinceCriteria();
    provinceCriteria.regionId = this.exploitationForm.controls['region'].value ? this.exploitationForm.controls['region'].value.id : null;
    this.getProvinces(provinceCriteria).then((provinces: Province[])=> {
      this.provinces = provinces;
    })
  }

  loadDensite() {
    let densiteCriteria: DensiteCriteria = new DensiteCriteria();
    this.densiteService.findDensitesByCriteria(densiteCriteria).subscribe((densites)=> {
      this.densites = densites;
    })
  }

  loadVarietes() {
    let varieteCriteria: VarieteCriteria = new VarieteCriteria();
    this.varieteService.findVarietesByCriteria(varieteCriteria).subscribe((varietes)=> {
      this.varietes = varietes;
    })
  }
  async ngOnInit() {
    this.initForm();
    this.appliedFilter = new Filter();
    this.initMap();
    let regionCriteria: RegionCriteria = new RegionCriteria();
    this.getRegions(regionCriteria).then((regions: Region[]) => {
      this.regions = regions;
    })
    this.loadProvinces();
    this.loadCercles();
    this.loadCommunes();
    this.getTypeActivities();
    this.getNatureSol();
    this.getTypeIrr();
    this.loadProduits();
    this.loadDensite();
    this.loadVarietes();
    this.loadActivite();
    this.getMinMaxSurfTot();
    this.loadMechanisationList();
    this.loadTechniciteList();
    this.loadMarcheList();
    this.loadCanalVente();
    this.loadValorisationList();
    this.loadStabilitePrixList();
    this.loadQualiteProduitList();
  }

  getNatureSol() {
    this.enumService.getNatureSol().subscribe((natureSol)=> {
      this.natureSol = Object.keys(natureSol).map(key => natureSol[key]);
    })
  }

  getMinMaxSurfTot() {
    let exploitationCriteria: ExploitationCriteria = new ExploitationCriteria();
    this.exploitationService.getMinMaxSurfTot(exploitationCriteria).subscribe((list) => {
      this.minSurf = list['min'];
      this.maxSurf = list['max'];
    })
  }
  switchBaseMap(baseMap) {
    let baseLayer;
    switch (baseMap) {
      case 'relief' : {
        baseLayer = new TileLayer({
          source: new TileArcGISRest({
            url: 'https://services.arcgisonline.com/arcgis/rest/services/World_Shaded_Relief/MapServer',
            crossOrigin: "Anonymous"
          }),
          name: 'Base Layer'
        });
        break;
      }
      case 'geographique' : {
        baseLayer = new TileLayer({
          source: new TileArcGISRest({
            url: 'https://services.arcgisonline.com/arcgis/rest/services/World_Topo_Map/MapServer',
            crossOrigin: "Anonymous"
          }),
          name: 'Base Layer'
        });
        break;
      }
      case 'satellite' : {
        baseLayer = new TileLayer({
          source: new TileArcGISRest({
            url: 'https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer',
            crossOrigin: "Anonymous"
          }),
          name: 'Base Layer'
        });

        break;
      }
      case 'osm' : {
        baseLayer = new TileLayer({
            source: new OSM(),
            name: 'Base Layer'
          });
        break;
      }
    }
    let self = this;
    this.map.getLayers().forEach( function(layer) {
      if(layer && layer.values_.name == 'Base Layer')
        self.map.removeLayer(layer);
      });

    baseLayer.setZIndex(0);
    this.map.addLayer(baseLayer);
  }
}
