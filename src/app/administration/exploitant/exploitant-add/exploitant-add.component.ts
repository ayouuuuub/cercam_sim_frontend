import { Utilisateur } from './../../../shared/models/utilisateur.model';
import { CercleCriteria } from './../../../shared/models/cercle.criteria';
import { FamilleProduit } from './../../../shared/models/famille_produit.model';
import { Component, OnInit, OnDestroy } from "@angular/core";
import { Subscription, Observable } from "rxjs";
import { BaseComponent } from "../../../shared/component/base-component";

import { FormBuilder, FormGroup, Validators } from "@angular/forms";

import { ToasterService } from 'angular2-toaster';
import { BusinessModel } from "src/app/shared/models/business-model";
import { Exploitant } from "src/app/shared/models/exploitant.model";
import { UtilityService } from "src/app/shared/core/utility/utility.service";
import { FileUploader } from "ng2-file-upload";
import { Cercle } from 'src/app/shared/models/cercle.model';
import { CommuneCriteria } from 'src/app/shared/models/commune.criteria';
import { Commune } from 'src/app/shared/models/commune.model';
import { FamilleProduitCriteria } from 'src/app/shared/models/famille_produit.criteria';
import { ProduitCriteria } from 'src/app/shared/models/produit.criteria';
import { Produit } from 'src/app/shared/models/produit.model';
import { ProvinceCriteria } from 'src/app/shared/models/province.criteria';
import { Province } from 'src/app/shared/models/province.model';
import { RegionCriteria } from 'src/app/shared/models/region.criteria';
import { Region } from 'src/app/shared/models/region.model';
import { ExploitantService } from 'src/app/shared/services/exploitant.service';
import { FamilleProduitService } from 'src/app/shared/services/famille_produit.service';
import { ProduitService } from 'src/app/shared/services/produit.service';
declare let myExtObject: any;

@Component({
    selector: 'app-exploitant-add',
    templateUrl: './exploitant-add.component.html',
    styleUrls: ['./exploitant-add.component.scss'],
})
export class ExploitantAddComponent extends BaseComponent implements OnInit, OnDestroy {

    public subscription: Subscription = new Subscription();
    public exploitant: Exploitant;
    public exploitantForm: FormGroup;
    public saveAndQuit: boolean;

    //----declaration des attribut du file import
    public uploader: FileUploader;
    public validFile: boolean;
    public uploadReset = false;
    public imgFilename: string;
    imageToShow: any;

    regions: Region[] = [];
    provinces: Province[] = [];
    cercles: Cercle[] = [];
    communes: Commune[] = [];
    public famillesProduits: FamilleProduit[] = [];
    produits: Produit[] = [];
    typesActivite: Object[];
    niveaux: Object[];

    constructor(
        public fb: FormBuilder,
        public exploitantService: ExploitantService,
        public toasterService: ToasterService,
        public familleProduitService: FamilleProduitService,
        public produitService: ProduitService,
        public utilityService: UtilityService) {
        super();
        this.toasterService = toasterService;
        this.createForm();
        this.changeFormInvalide(this.exploitantForm);


    }

    ngOnInit() {
        // if (this.hasRole('ROLE_CREATE_EXPLOITANT'))
            this.init();
            console.log(this.currentUser.id);
    //     else
    //         this.showUnauthorizedError(true);
    }

    loadCommunes() {
      this.exploitantForm.controls['commune'].setValue(null);
      this.communes = [];

      let communeCriteria: CommuneCriteria = new CommuneCriteria();
      communeCriteria.cercleId = this.exploitantForm.controls['cercle'].value ? this.exploitantForm.controls['cercle'].value.id : null;
      this.getCommunes(communeCriteria).then((communes: Commune[]) => {
        this.communes = communes;
      })
    }

    loadCercles(){
      this.exploitantForm.controls['cercle'].setValue(null);
      this.cercles = [];

      let cercleCriteria: CercleCriteria = new CercleCriteria();
      cercleCriteria.provinceId = this.exploitantForm.controls['province'].value ? this.exploitantForm.controls['province'].value.id : null;
      this.getCercles(cercleCriteria).then((cercles: Cercle[]) => {
        this.cercles = cercles;
      })
    }

    loadProvinces() {
      this.exploitantForm.controls['province'].setValue(null);
      this.provinces = [];

      let provinceCriteria: ProvinceCriteria = new ProvinceCriteria();
      provinceCriteria.regionId = this.exploitantForm.controls['region'].value ? this.exploitantForm.controls['region'].value.id : null;
      this.getProvinces(provinceCriteria).then((provinces: Province[])=> {
        this.provinces = provinces;
      })
    }

    loadProduits() {
      this.exploitantForm.controls['produit'].setValue(null);
      this.produits = [];
      let produitCriteria: ProduitCriteria = new ProduitCriteria();
      produitCriteria.familleId = this.exploitantForm.controls['familleProduit'].value ? this.exploitantForm.controls['familleProduit'].value.id : null;
      this.produitService.findProduitsByCriteria(produitCriteria).subscribe((produits: Produit[])=> {
        this.produits = produits;
      })
    }

    createImageFromBlob(image: Blob) {
      const reader = new FileReader();
      reader.addEventListener("load", () => {
        this.imageToShow = reader.result;
        // here you can save base64-image to session/localStorage
        //localStorage.setItem('item', this.imageToShow);
      }, false);

      if (image) {
        reader.readAsDataURL(image);
      }
    }

    getFamilleProduit() {
      this.famillesProduits = [];
      this.exploitantForm.controls['familleProduit'].setValue(null);
      let familleProduitCriteria: FamilleProduitCriteria = new FamilleProduitCriteria();
      familleProduitCriteria.type = this.exploitantForm.controls['typeActivite'].value;
      this.familleProduitService.findFamilleProduitsByCriteria(familleProduitCriteria).subscribe((famillesProduits) =>{
        this.famillesProduits = famillesProduits;
      })
    }

    init() {
        this.exploitant = new Exploitant();
        this.initData();
        this.saveAndQuit = false;
        this.enumService.getTypeActivite().subscribe((typesActivite) => {
          this.typesActivite = Object.keys(typesActivite).map(key => typesActivite[key]);
          this.exploitantForm.controls['typeActivite'].setValue(this.typesActivite[0]);
          this.getFamilleProduit();
        })
        this.enumService.getNivEtudes().subscribe((niveaux) => {
          this.niveaux = Object.keys(niveaux).map(key => niveaux[key]);
        })
        let regionCriteria: RegionCriteria = new RegionCriteria();
        this.getRegions(regionCriteria).then((regions: Region[]) => {
          this.regions = regions;
        })
    }

    initData() {

    }
    createForm() {
        this.exploitantForm = this.fb.group({
            firstname: [null, Validators.required],
            lastname: [null, Validators.required],
            age: [null, Validators.required],
            cin: [null, Validators.required],
            adresse: [null],
            description: [null],
            libelle: [null],
            telephone: [null],
            isClient: [false, Validators.required],
            region: [null],
            province: [null],
            commune: [null],
            cercle: [null],
            typeActivite: [null],
            niveau_etude: [null],
            familleProduit: [null],
            produit: [null]
        });
    }
    saveExploitant(exploitantForm: any) {
        this.validateFormExploitant(this.exploitantForm);
        if (this.exploitantForm.valid) {
            // if (this.hasRole('ROLE_CREATE_EXPLOITANT')) {
                this.addBusy();

                Object.assign(this.exploitant, exploitantForm);
                console.log(this.exploitant);
                this.exploitant.utilisateurCreation = new Utilisateur(this.currentUser.id)
                const subscription = this.exploitantService.saveExploitant(this.exploitant)
                    .subscribe(success => {
                        this.showInfo("common.message.create.info");
                        if (this.saveAndQuit) {
                            const id: number = this.getResponseBody(success);
                            this.router.navigate(['/exploitant/list']);
                            this.saveAndQuit = false;
                        }
                        this.reset();
                    }, error => this.showError(error.status, JSON.parse(JSON.stringify(error)).message));
                this.subscription.add(subscription);

            // } else {
            //     this.showUnauthorizedError();
            // }
        }
    }

    validateFormExploitant(form) {
        this.detectInvalideFormControle(form);
    }

    reset() {
        this.exploitantForm.reset({ enabled: false, resetPassword: false, profil: null });
        this.resetValidateForm(this.exploitantForm);
        this.init();


    }



    public ngOnDestroy() {

        this.initData();
        this.subscription.unsubscribe();
    }




}
